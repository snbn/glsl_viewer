export namespace glMatrix {
    class ARRAY_TYPE {
        static BYTES_PER_ELEMENT: number;
        static from(p0: any): any;
        static of(): any;
        constructor(p0: any, p1: any, p2: any);
        copyWithin(p0: any, p1: any): any;
        entries(): any;
        every(p0: any): any;
        fill(p0: any): any;
        filter(p0: any): any;
        find(p0: any): any;
        findIndex(p0: any): any;
        forEach(p0: any): any;
        includes(p0: any): any;
        indexOf(p0: any): any;
        join(p0: any): any;
        keys(): any;
        lastIndexOf(p0: any): any;
        map(p0: any): any;
        reduce(p0: any): any;
        reduceRight(p0: any): any;
        reverse(): any;
        set(p0: any): any;
        slice(p0: any, p1: any): any;
        some(p0: any): any;
        sort(p0: any): any;
        subarray(p0: any, p1: any): any;
        toLocaleString(): any;
        values(): any;
    }
    const EPSILON: number;
    function RANDOM(): any;
    function equals(a: any, b: any): any;
    function setMatrixArrayType(type: any): void;
    function toRadian(a: any): any;
}
export namespace mat2 {
    function LDU(L: any, D: any, U: any, a: any): any;
    function add(out: any, a: any, b: any): any;
    function adjoint(out: any, a: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function determinant(a: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function frob(a: any): any;
    function fromRotation(out: any, rad: any): any;
    function fromScaling(out: any, v: any): any;
    function fromValues(m00: any, m01: any, m10: any, m11: any): any;
    function identity(out: any): any;
    function invert(out: any, a: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function multiplyScalar(out: any, a: any, b: any): any;
    function multiplyScalarAndAdd(out: any, a: any, b: any, scale: any): any;
    function rotate(out: any, a: any, rad: any): any;
    function scale(out: any, a: any, v: any): any;
    function set(out: any, m00: any, m01: any, m10: any, m11: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function transpose(out: any, a: any): any;
}
export namespace mat2d {
    function add(out: any, a: any, b: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function determinant(a: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function frob(a: any): any;
    function fromRotation(out: any, rad: any): any;
    function fromScaling(out: any, v: any): any;
    function fromTranslation(out: any, v: any): any;
    function fromValues(a: any, b: any, c: any, d: any, tx: any, ty: any): any;
    function identity(out: any): any;
    function invert(out: any, a: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function multiplyScalar(out: any, a: any, b: any): any;
    function multiplyScalarAndAdd(out: any, a: any, b: any, scale: any): any;
    function rotate(out: any, a: any, rad: any): any;
    function scale(out: any, a: any, v: any): any;
    function set(out: any, a: any, b: any, c: any, d: any, tx: any, ty: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function translate(out: any, a: any, v: any): any;
}
export namespace mat3 {
    function add(out: any, a: any, b: any): any;
    function adjoint(out: any, a: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function determinant(a: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function frob(a: any): any;
    function fromMat2d(out: any, a: any): any;
    function fromMat4(out: any, a: any): any;
    function fromQuat(out: any, q: any): any;
    function fromRotation(out: any, rad: any): any;
    function fromScaling(out: any, v: any): any;
    function fromTranslation(out: any, v: any): any;
    function fromValues(m00: any, m01: any, m02: any, m10: any, m11: any, m12: any, m20: any, m21: any, m22: any): any;
    function identity(out: any): any;
    function invert(out: any, a: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function multiplyScalar(out: any, a: any, b: any): any;
    function multiplyScalarAndAdd(out: any, a: any, b: any, scale: any): any;
    function normalFromMat4(out: any, a: any): any;
    function projection(out: any, width: any, height: any): any;
    function rotate(out: any, a: any, rad: any): any;
    function scale(out: any, a: any, v: any): any;
    function set(out: any, m00: any, m01: any, m02: any, m10: any, m11: any, m12: any, m20: any, m21: any, m22: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function translate(out: any, a: any, v: any): any;
    function transpose(out: any, a: any): any;
}
export namespace mat4 {
    function add(out: any, a: any, b: any): any;
    function adjoint(out: any, a: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function determinant(a: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function frob(a: any): any;
    function fromQuat(out: any, q: any): any;
    function fromQuat2(out: any, a: any): any;
    function fromRotation(out: any, rad: any, axis: any): any;
    function fromRotationTranslation(out: any, q: any, v: any): any;
    function fromRotationTranslationScale(out: any, q: any, v: any, s: any): any;
    function fromRotationTranslationScaleOrigin(out: any, q: any, v: any, s: any, o: any): any;
    function fromScaling(out: any, v: any): any;
    function fromTranslation(out: any, v: any): any;
    function fromValues(m00: any, m01: any, m02: any, m03: any, m10: any, m11: any, m12: any, m13: any, m20: any, m21: any, m22: any, m23: any, m30: any, m31: any, m32: any, m33: any): any;
    function fromXRotation(out: any, rad: any): any;
    function fromYRotation(out: any, rad: any): any;
    function fromZRotation(out: any, rad: any): any;
    function frustum(out: any, left: any, right: any, bottom: any, top: any, near: any, far: any): any;
    function getRotation(out: any, mat: any): any;
    function getScaling(out: any, mat: any): any;
    function getTranslation(out: any, mat: any): any;
    function identity(out: any): any;
    function invert(out: any, a: any): any;
    function lookAt(out: any, eye: any, center: any, up: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function multiplyScalar(out: any, a: any, b: any): any;
    function multiplyScalarAndAdd(out: any, a: any, b: any, scale: any): any;
    function ortho(out: any, left: any, right: any, bottom: any, top: any, near: any, far: any): any;
    function perspective(out: any, fovy: any, aspect: any, near: any, far: any): any;
    function perspectiveFromFieldOfView(out: any, fov: any, near: any, far: any): any;
    function rotate(out: any, a: any, rad: any, axis: any): any;
    function rotateX(out: any, a: any, rad: any): any;
    function rotateY(out: any, a: any, rad: any): any;
    function rotateZ(out: any, a: any, rad: any): any;
    function scale(out: any, a: any, v: any): any;
    function set(out: any, m00: any, m01: any, m02: any, m03: any, m10: any, m11: any, m12: any, m13: any, m20: any, m21: any, m22: any, m23: any, m30: any, m31: any, m32: any, m33: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function targetTo(out: any, eye: any, target: any, up: any): any;
    function translate(out: any, a: any, v: any): any;
    function transpose(out: any, a: any): any;
}
export namespace quat {
    function add(out: any, a: any, b: any): any;
    function calculateW(out: any, a: any): any;
    function clone(a: any): any;
    function conjugate(out: any, a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function dot(a: any, b: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function fromEuler(out: any, x: any, y: any, z: any): any;
    function fromMat3(out: any, m: any): any;
    function fromValues(x: any, y: any, z: any, w: any): any;
    function getAxisAngle(out_axis: any, q: any): any;
    function identity(out: any): any;
    function invert(out: any, a: any): any;
    function len(a: any): any;
    function length(a: any): any;
    function lerp(out: any, a: any, b: any, t: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function normalize(out: any, a: any): any;
    function random(out: any): any;
    function rotateX(out: any, a: any, rad: any): any;
    function rotateY(out: any, a: any, rad: any): any;
    function rotateZ(out: any, a: any, rad: any): any;
    function rotationTo(out: any, a: any, b: any): any;
    function scale(out: any, a: any, b: any): any;
    function set(out: any, x: any, y: any, z: any, w: any): any;
    function setAxes(out: any, view: any, right: any, up: any): any;
    function setAxisAngle(out: any, axis: any, rad: any): any;
    function slerp(out: any, a: any, b: any, t: any): any;
    function sqlerp(out: any, a: any, b: any, c: any, d: any, t: any): any;
    function sqrLen(a: any): any;
    function squaredLength(a: any): any;
    function str(a: any): any;
}
export namespace quat2 {
    function add(out: any, a: any, b: any): any;
    function clone(a: any): any;
    function conjugate(out: any, a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function dot(a: any, b: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function fromMat4(out: any, a: any): any;
    function fromRotation(out: any, q: any): any;
    function fromRotationTranslation(out: any, q: any, t: any): any;
    function fromRotationTranslationValues(x1: any, y1: any, z1: any, w1: any, x2: any, y2: any, z2: any): any;
    function fromTranslation(out: any, t: any): any;
    function fromValues(x1: any, y1: any, z1: any, w1: any, x2: any, y2: any, z2: any, w2: any): any;
    function getDual(out: any, a: any): any;
    function getReal(out: any, a: any): any;
    function getTranslation(out: any, a: any): any;
    function identity(out: any): any;
    function invert(out: any, a: any): any;
    function len(a: any): any;
    function length(a: any): any;
    function lerp(out: any, a: any, b: any, t: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function normalize(out: any, a: any): any;
    function rotateAroundAxis(out: any, a: any, axis: any, rad: any): any;
    function rotateByQuatAppend(out: any, a: any, q: any): any;
    function rotateByQuatPrepend(out: any, q: any, a: any): any;
    function rotateX(out: any, a: any, rad: any): any;
    function rotateY(out: any, a: any, rad: any): any;
    function rotateZ(out: any, a: any, rad: any): any;
    function scale(out: any, a: any, b: any): any;
    function set(out: any, x1: any, y1: any, z1: any, w1: any, x2: any, y2: any, z2: any, w2: any): any;
    function setDual(out: any, q: any): any;
    function setReal(out: any, a: any): any;
    function sqrLen(a: any): any;
    function squaredLength(a: any): any;
    function str(a: any): any;
    function translate(out: any, a: any, v: any): any;
}
export namespace vec2 {
    function add(out: any, a: any, b: any): any;
    function angle(a: any, b: any): any;
    function ceil(out: any, a: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function cross(out: any, a: any, b: any): any;
    function dist(a: any, b: any): any;
    function distance(a: any, b: any): any;
    function div(out: any, a: any, b: any): any;
    function divide(out: any, a: any, b: any): any;
    function dot(a: any, b: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function floor(out: any, a: any): any;
    function forEach(a: any, stride: any, offset: any, count: any, fn: any, arg: any): any;
    function fromValues(x: any, y: any): any;
    function inverse(out: any, a: any): any;
    function len(a: any): any;
    function length(a: any): any;
    function lerp(out: any, a: any, b: any, t: any): any;
    function max(out: any, a: any, b: any): any;
    function min(out: any, a: any, b: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function negate(out: any, a: any): any;
    function normalize(out: any, a: any): any;
    function random(out: any, scale: any): any;
    function rotate(out: any, a: any, b: any, c: any): any;
    function round(out: any, a: any): any;
    function scale(out: any, a: any, b: any): any;
    function scaleAndAdd(out: any, a: any, b: any, scale: any): any;
    function set(out: any, x: any, y: any): any;
    function sqrDist(a: any, b: any): any;
    function sqrLen(a: any): any;
    function squaredDistance(a: any, b: any): any;
    function squaredLength(a: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function transformMat2(out: any, a: any, m: any): any;
    function transformMat2d(out: any, a: any, m: any): any;
    function transformMat3(out: any, a: any, m: any): any;
    function transformMat4(out: any, a: any, m: any): any;
    function zero(out: any): any;
}
export namespace vec3 {
    function add(out: any, a: any, b: any): any;
    function angle(a: any, b: any): any;
    function bezier(out: any, a: any, b: any, c: any, d: any, t: any): any;
    function ceil(out: any, a: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function cross(out: any, a: any, b: any): any;
    function dist(a: any, b: any): any;
    function distance(a: any, b: any): any;
    function div(out: any, a: any, b: any): any;
    function divide(out: any, a: any, b: any): any;
    function dot(a: any, b: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function floor(out: any, a: any): any;
    function forEach(a: any, stride: any, offset: any, count: any, fn: any, arg: any): any;
    function fromValues(x: any, y: any, z: any): any;
    function hermite(out: any, a: any, b: any, c: any, d: any, t: any): any;
    function inverse(out: any, a: any): any;
    function len(a: any): any;
    function length(a: any): any;
    function lerp(out: any, a: any, b: any, t: any): any;
    function max(out: any, a: any, b: any): any;
    function min(out: any, a: any, b: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function negate(out: any, a: any): any;
    function normalize(out: any, a: any): any;
    function random(out: any, scale: any): any;
    function rotateX(out: any, a: any, b: any, c: any): any;
    function rotateY(out: any, a: any, b: any, c: any): any;
    function rotateZ(out: any, a: any, b: any, c: any): any;
    function round(out: any, a: any): any;
    function scale(out: any, a: any, b: any): any;
    function scaleAndAdd(out: any, a: any, b: any, scale: any): any;
    function set(out: any, x: any, y: any, z: any): any;
    function sqrDist(a: any, b: any): any;
    function sqrLen(a: any): any;
    function squaredDistance(a: any, b: any): any;
    function squaredLength(a: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function transformMat3(out: any, a: any, m: any): any;
    function transformMat4(out: any, a: any, m: any): any;
    function transformQuat(out: any, a: any, q: any): any;
    function zero(out: any): any;
}
export namespace vec4 {
    function add(out: any, a: any, b: any): any;
    function ceil(out: any, a: any): any;
    function clone(a: any): any;
    function copy(out: any, a: any): any;
    function create(): any;
    function cross(out: any, u: any, v: any, w: any): any;
    function dist(a: any, b: any): any;
    function distance(a: any, b: any): any;
    function div(out: any, a: any, b: any): any;
    function divide(out: any, a: any, b: any): any;
    function dot(a: any, b: any): any;
    function equals(a: any, b: any): any;
    function exactEquals(a: any, b: any): any;
    function floor(out: any, a: any): any;
    function forEach(a: any, stride: any, offset: any, count: any, fn: any, arg: any): any;
    function fromValues(x: any, y: any, z: any, w: any): any;
    function inverse(out: any, a: any): any;
    function len(a: any): any;
    function length(a: any): any;
    function lerp(out: any, a: any, b: any, t: any): any;
    function max(out: any, a: any, b: any): any;
    function min(out: any, a: any, b: any): any;
    function mul(out: any, a: any, b: any): any;
    function multiply(out: any, a: any, b: any): any;
    function negate(out: any, a: any): any;
    function normalize(out: any, a: any): any;
    function random(out: any, scale: any): any;
    function round(out: any, a: any): any;
    function scale(out: any, a: any, b: any): any;
    function scaleAndAdd(out: any, a: any, b: any, scale: any): any;
    function set(out: any, x: any, y: any, z: any, w: any): any;
    function sqrDist(a: any, b: any): any;
    function sqrLen(a: any): any;
    function squaredDistance(a: any, b: any): any;
    function squaredLength(a: any): any;
    function str(a: any): any;
    function sub(out: any, a: any, b: any): any;
    function subtract(out: any, a: any, b: any): any;
    function transformMat4(out: any, a: any, m: any): any;
    function transformQuat(out: any, a: any, q: any): any;
    function zero(out: any): any;
}
